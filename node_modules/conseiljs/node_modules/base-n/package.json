{
  "_args": [
    [
      "base-n@git://github.com/yourcodesucks/base-n.git",
      "/home/oem/Desktop/Blockchain/node_modules/conseiljs"
    ]
  ],
  "_from": "git://github.com/yourcodesucks/base-n.git",
  "_id": "base-n@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/conseiljs/base-n",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/yourcodesucks/base-n/master/package.json",
      "gitUrl": "git://github.com/yourcodesucks/base-n.git",
      "httpsUrl": "git+https://github.com/yourcodesucks/base-n.git",
      "shortcut": "github:yourcodesucks/base-n",
      "ssh": "git@github.com:yourcodesucks/base-n.git",
      "sshUrl": "git+ssh://git@github.com/yourcodesucks/base-n.git",
      "type": "github"
    },
    "name": "base-n",
    "raw": "base-n@git://github.com/yourcodesucks/base-n.git",
    "rawSpec": "git://github.com/yourcodesucks/base-n.git",
    "scope": null,
    "spec": "git://github.com/yourcodesucks/base-n.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/conseiljs"
  ],
  "_resolved": "git://github.com/yourcodesucks/base-n.git#9d983f475c7396fbdc2fcbbc35b4821f0deeaa25",
  "_shasum": "664d0af56af84d64528b0f913fab5b5cea677021",
  "_shrinkwrap": null,
  "_spec": "base-n@git://github.com/yourcodesucks/base-n.git",
  "_where": "/home/oem/Desktop/Blockchain/node_modules/conseiljs",
  "author": {
    "name": "Alex Liu"
  },
  "bin": {
    "codex": "./bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/DonutEspresso/base-n/issues"
  },
  "dependencies": {
    "dashdash": "^1.14.1"
  },
  "description": "generate short and reversible IDs as a replacement for numerical or hex IDs",
  "devDependencies": {
    "chai": "^4.1.2",
    "coveralls": "^3.0.1",
    "eslint": "^4.19.1",
    "mocha": "^5.2.0",
    "nyc": "^12.0.2"
  },
  "gitHead": "9d983f475c7396fbdc2fcbbc35b4821f0deeaa25",
  "homepage": "https://github.com/DonutEspresso/base-n#readme",
  "keywords": [
    "base-n",
    "base10",
    "base64",
    "id",
    "id",
    "reversible",
    "shortid",
    "tinyid"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "base-n",
  "optionalDependencies": {},
  "readme": "# base-n\n\n[![NPM Version](https://img.shields.io/npm/v/base-n.svg)](https://npmjs.org/package/base-n)\n[![Build Status](https://travis-ci.org/DonutEspresso/base-n.svg?branch=master)](https://travis-ci.org/DonutEspresso/base-n)\n[![Coverage Status](https://coveralls.io/repos/DonutEspresso/base-n/badge.svg?branch=master)](https://coveralls.io/r/DonutEspresso/base-n?branch=master)\n[![Dependency Status](https://david-dm.org/DonutEspresso/base-n.svg)](https://david-dm.org/DonutEspresso/base-n)\n\n> A utility for encoding/decoding base10 integers into a URL safe base-n string\n\n## Getting Started\n\nInstall the module with: `npm install base-n`\n\n## Why?\n\nThe primary use case for this module is to shorten numerical IDs in terms of\nnumber of characters for URL usage, and then to easily decode those again\nat a later point in time. For example, base10 only supports up to 100 unique IDs\nin a two character space. By contrast, base64 supports up to (64^2 =) 4096\nunique IDs in the same two character space.\n\nIt should be noted that the encoding does not use a random number generater or\na salt, so if cryptographic security is of importance, this probably won't meet\nyour needs.\n\nbase-n supports encoding base10 integers into a non base10 encoded string, where\n_n_ can be any value between 2 and 64. By default, the utility supports up to\nbase64, using the following URL safe characters:\n\n```sh\n0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-\n```\n\n## Usage\n\nTo use the lib, simply create an encoder instance:\n\n```js\nvar baseN = require('base-n');\nvar b64 = baseN.create();\n\nb64.encode(10);\n// => 'a'\nb64.encode(100);\n// => '1a'\nb64.encode(842673);\n// => '3dKN'\n```\n\nTo decode, you can use the same object:\n\n```js\nb64.decode('z');\n// => 35\nb64.decode('zTh');\n// => 146897\n```\n\nChoosing a different base simply uses a subset of these available characters.\nShould you need to use a completely different set of characters (e.g., if you\nhave no need for URL safe characters), you can pass in your own custom set of\ncharacters.\n\n```js\nvar baseN = require('base-n');\nvar b2 = baseN.create({\n    characters: '$*'\n});\n\nb2.encode(10);\n// => '*$*$'\n```\n\nFor URL usage, it may be useful to generated a fixed length output. You can\nspecify the fixed length to the constructor, and the output will be padded with\nleading 0's to match that length:\n\n```js\nvar b64 = baseN.create({\n    length: 4\n});\n\nb64.encode('10');\n// => '000a'\n\n// You can also indirectly specify max length by specifying the maximum integer\n// value acceptable to the encoder:\n\nvar b64 = baseN.create({\n    max: 4096\n});\n// => results in a length of 3, because it requires 3 characters to safely\n//    represent 4096 ('100'). Note however, that the encoder will continue to\n//    safely encode base10 values greater than 4096, so long as they can be\n//    represented by 3 characters.\n```\n\n## Error cases\n\nShould you attempt to encode a value that's greater than can be represented by\nthe fixed length, base-n will throw an error:\n\n```js\nvar b64 = baseN.create({\n    length: 2\n});\n\n// the max space available for two characters is 4096 (0-4095), so this will\n// fail, since the encoded value for 4096 is '100'\nb64.encode(4096);\n// => Error: base10 value of 4096 (encoded: 100) exceeds maximum length of 2\n```\n\nIf base-n comes across an unknown character while decoding, base-n will throw\nan error:\n\n```js\nvar b64 = baseN.create();\n\nb64.decode('$');\n// => Error: unknown $ character encountered\n```\n\n\n## API\n\n### create([options])\nCreate an encoder/decoder object.\n\n* `options.max` {Number} - Set maximum input integer. Mutually exclusive with `length` option.\n* `options.length` {Number} - Set maximum output length of encoded value. Mutually exclusive with `max` option.\n* `options.base` {Boolean} - Set the base-n value of the encoder. Mutually exclusive with `characters` option.\n* `options.characters` {Boolean} - Set a custom character set. The length of the character set string becomes the base. Mutually exclusive with `base` option.\n\n__Returns__: {Object} encoder object\n\nThe returned encoder object has the following methods\n\n### encode(num)\n\n* `num` {Number} - any base10 integer value\n\n__Returns__: {String} string encoded value\n\n### decode(stringVal)\n\n* `stringVal` {String} - any value encoded by base-n\n\n__Returns__: {Number} base10 integer\n\n\n## Contributing\n\nTo start contributing, install the git pre-push hooks:\n\n```sh\nmake githooks\n```\n\nBefore committing, lint and test your code using the included Makefile:\n```sh\nmake prepush\n```\n\n## License\n\nCopyright (c) 2018 Alex Liu.\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DonutEspresso/base-n.git"
  },
  "version": "1.0.0"
}
